<system>
  <title>
    Sayer
    <!-- What it is called. Short. Easy to remember. Relevant. -->
  </title>
  <acronym-expansion>
    <!-- If it is an acronym, what does it expand to? -->
  </acronym-expansion>
  <slogan>
    <!-- What if any is the slogan? -->
  </slogan>
  <pi>
    <!-- Who is Principle Investigator? -->
  </pi>
  <short-description>
    Cognitive system that analyzes data structures for meaning
    <!-- "This system is a system that ..."

	 Syntactic  controls: The $title  system is  a (system  for)? "..."
	 Tag line, under 70 characters, do not puncuate end.
	 
	 Semantic controls:  Purpose of  short-description is to  provide a
	 one  line  summary that  gives  some  indication  of the  system's
	 capabilities  for  things  like  apt.   It is  equivalent  to  the
	 short-desc from the Debian control file.

	 QUOTED FROM DEBIAN POLICY

	 3.4.1 The single line synopsis

	 The single line synopsis should be kept brief - certainly under 80
	 characters.

	 Do not include the package  name in the synopsis line. The display
	 software knows how to display this already, and you do not need to
	 state it. Remember  that in many situations the  user may only see
	 the synopsis line - make it  as informative as you can.

	 (Answers question .)
    -->
  </short-description>
  <medium-description>
    Sayer gets its name because it builds a context by asserting
    interesting facts about arbitrary Perl data structures.  Sayer
    (along with Thinker) is one of the most interesting projects of
    the FRDCSA.  What it does is index arbitrary perl data structures,
    and attempt to derive interesting information and conclusions
    about that data using machine learning.  For instance, if your
    data structure consisted of a string, and that string contained a
    paragraph of text, sayer would apply a decision tree or similar,
    set of tests, to determine that it indeed was as we described.  It
    would represent this relation as a graph, with verticies as
    data-points, I.e. the input, and "true", and edges as function
    calls.  All data of course is stored to a database.  This graph
    data is then used as input to classifiers that attempt to distill
    summarily interesting information about said data.  For instance,
    if it is a sentence, it may well wish to perform various NLP
    procedures, extracting things like named entities, and recursively
    analyzing those within it's attention span.  It uses Perl as
    knowledge representation interlingua.  The architecture is
    expansive, complex, and beautiful and integrates many other FRDCSA
    systems.
    <!-- Similar to extended description for Debian.
	 
	 QUOTED FROM DEBIAN POLICY

	 3.4.2 The extended description

	 Do not try to continue  the single line synopsis into the extended
	 description.  This   will  not   work  correctly  when   the  full
	 description  is  displayed, and  makes  no  sense  where only  the
	 summary (the single line synopsis) is available.

	 The extended description should describe what the package does and
	 how  it relates  to  the rest  of  the system  (in  terms of,  for
	 example, which subsystem it is which part of).

	 The description field  needs to make sense to  anyone, even people
	 who  have  no idea  about  any of  the  things  the package  deals
	 with.[6]
    -->
    <summary>
      <!-- What does the system do? -->
    </summary>
    <relationship>
      <!-- What is the relation to the rest of the FRDCSA? -->
    </relationship>
    <lay-description>
      <!-- Give a non-technical description of what the system does. -->
    </lay-description>
  </medium-description>
  <long-description>
    <intro>
      <!-- Long  description goes on  the codebase  website as  the Project
	   Description.  One  or more  paragraphs that gives  very detailed
	   information about the project or codebase.
      -->
    </intro>
    <provides>
      <!-- What does package do technically? -->
      <capability>
      </capability>
    </provides>
    <relationships>
      <!-- What is the technical relation to FRDCSA subsystems? -->
      <subsystems>
      </subsystems>
      <supersystems>
      </supersystems>
      <package-dependencies>
	<!-- What Debian packages does this depend on? -->
      </package-dependencies>
      <other-dependencies>
	<!-- What codebases does this depend on? -->
      </other-dependencies>
    </relationships>
    <technical-description>
      <!-- Give a detailed technical description. -->
    </technical-description>
    <relevant-information>
      <!-- Give any other relevant information. -->
    </relevant-information>
    <conclusion>
    </conclusion>
    <links>
      <link>
      </link>
    </links>
  </long-description>
</system>